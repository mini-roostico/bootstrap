name: CI/CD Process
on:
  workflow_call:
  workflow_dispatch:
jobs:
  check-secrets:
    runs-on: ubuntu-24.04
    outputs:
      run-with-secrets: ${{ steps.require-secrets.outputs.run-with-secrets }}
    steps:
      - name: Find if secrets are available
        id: detect-secrets
        uses: DanySK/are-secrets-available@1.0.0
        with:
          secrets: ${{ toJson(secrets) }}
      - name: Set condition
        id: require-secrets
        run: |
          echo "run-with-secrets=${{ steps.detect-secrets.outputs.has-secrets == 'true' && !github.event.repository.fork }}" >> $GITHUB_OUTPUT

  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs:
      - check-secrets
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set up keys
        run: |
          mkdir -p secrets
          echo "${{ secrets.AT_PRIVATE }}" > secrets/at_private.pem
          echo "${{ secrets.AT_PUBLIC }}" > secrets/at_public.pem
          echo "${{ secrets.RT_PRIVATE }}" > secrets/rt_private.pem
          echo "${{ secrets.RT_PUBLIC }}" > secrets/rt_public.pem
      - name: Set up Docker Compose
        uses: hoverkraft-tech/compose-action@v2.2.0
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npx playwright test
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  release:
    concurrency:
      # Only one release job at a time per branch, as only master releases.
      # Strictly sequential.
      group: release-${{ github.event.number || github.ref }}
    permissions: write-all
    runs-on: ubuntu-24.04
    needs:
      - check-secrets
      - test
    if: |
      always() &&
      needs.check-secrets.outputs.run-with-secrets == 'true' &&
      needs.test.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          token: ${{ secrets.DEPLOYMENT_TOKEN }}
      - uses: actions/setup-node@v4.2.0
        with:
          cache: npm
          node-version: lts/*
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm install
          npm ci
          npx semantic-release

  success:
    runs-on: ubuntu-latest
    needs:
      - release
    if: >-
      always() && (
        contains(join(needs.*.result, ','), 'failure')
        || !contains(join(needs.*.result, ','), 'cancelled')
      )
    steps:
      - name: Verify that there were no failures
        run: ${{ !contains(join(needs.*.result, ','), 'failure') }}